geom_line(aes(y = prednls))
theme_ipsum()
scatter.dados
scatter.dados <- ggplot(dados.df, aes(x=x, y=y)) +
ggtitle("Scatterplot dos dados") +
geom_point(size=3) +
geom_line(aes(y = prednls)) +
theme_ipsum()
scatter.dados
scatter.dados <- ggplot(dados.df, aes(x=x, y=y)) +
ggtitle("Scatterplot dos dados") +
geom_point(size=3) +
geom_line(aes(y = prednls), size = 1, colour = "blue") +
theme_ipsum()
scatter.dados
scatter.dados <- ggplot(dados.df, aes(x=x, y=y)) +
ggtitle("Curva Ajustada aos dados") +
geom_point(size=3) +
geom_line(aes(y = prednls), size = 1, colour = "blue") +
theme_ipsum()
scatter.dados
scatter.dados <- ggplot(dados.df, aes(x=x, y=y)) +
ggtitle("Curva ajustada aos dados") +
geom_point(size=3) +
geom_line(aes(y = prednls), size = 1, colour = "blue") +
theme_ipsum()
scatter.dados
dados.df$prednls <- predict(ricker.fit)
head(dados.df)
dados <- c(
84.30, 0.28,
97.30, 0.74,
10.73, 4.52,
80.65, 0.60,
34.49, 1.17,
77.40, 0.31,
52.94, 0.70,
22.92, 3.53,
76.30, 0.40,
99.65, 0.08,
92.08, 0.48,
1.49 , 1.73,
16.88, 3.77,
72.23, 0.06,
28.23, 3.03,
55.22, 0.67,
12.15, 4.01,
49.12, 0.63,
64.32, 0.21,
40.68, 1.72,
68.76, 0.31,
44.34, 1.01,
6.89 , 3.60,
18.78, 3.95,
68.15, 0.20
)
even_idx <- seq(1,length(dados), by=2)
odds_idx <- seq(1, length(dados))[-even_idx]
dados.df <- tibble(
x = dados[even_idx],
y = dados[odds_idx]
)
head(dados.df)
dados.df$prednls <- predict(ricker.fit)
head(dados.df)
summary(ricker.fit)
scatter.fitted <- ggplot(dados.df, aes(x=x, y=y)) +
ggtitle("Curva ajustada aos dados") +
geom_point(size=3) +
geom_line(aes(y = prednls), size = 1, colour = "blue") +
theme_ipsum()
scatter.fitted
ggplot(dados.df, aes(sample=prednls)) +
stat_qq() + stat_qq_line()
ggplot(dados.df, aes(sample=prednls)) +
stat_qq() + stat_qq_line() +
theme_ipsum()
ggplot(dados.df, aes(sample=prednls)) +
stat_qq() + stat_qq_line() +
theme_ipsum()
ggplot(dados.df, aes(sample=prednls)) +
stat_qq() + stat_qq_line() +
theme_ipsum()
hist(ricker.fit$residuals)
hist(ricker.fit$res)
hist(summary(ricker.fit)$residuals)
ricker.fit
ricker.fit$m
ricker.fit
summary(ricker.fit)
summary <- summary(ricker.fit)
summary$residuals
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram() +
theme_ipsum()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram() +
theme_ipsum()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram(binwidth = 10) +
theme_ipsum()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram(binwidth = 20) +
theme_ipsum()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram(binwidth = 30) +
theme_ipsum()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram +
theme_ipsum()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram() +
theme_ipsum()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram(bins = 20) +
theme_ipsum()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram(bins = 10) +
theme_ipsum()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram(bins = 20) +
theme_ipsum()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram(bins = 10) +
theme_ipsum()
ggplot(data = dados.df, aes(x=summary$residuals)) +
geom_histogram(bins = 30) +
theme_ipsum()
plot(ricker.fit)
plot(ricker.fit$data)
plot(ricker.fit$m)
plot(summary$residuals)
plot(summary$residuals,
xlab = "Valores Ajustados",
ylab = "Resíduos",
abline())
plot(summary$residuals,
xlab = "Valores Ajustados",
ylab = "Resíduos")
ggplot(summary$residuals,
xlab = "Valores Ajustados",
ylab = "Resíduos")
nvctest(ricker.fit)
car::ncvTest(ricker.fit)
install.packages("nlstools")
library(nlstools)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
attach(Wage)
library(nlstools)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
attach(Wage)
library(nlstools)
ricker.residuals <- nlsResiduals(ricker.fit)
plot(ricker.residuals)
ricker.residuals <- nlsResiduals(ricker.fit)
plot(ricker.residuals)
plot(ricker.residuals, which = 1)
plot(ricker.residuals)
dados.df$prednls <- predict(ricker.fit)
head(dados.df)
scatter.fitted <- ggplot(dados.df, aes(x=x, y=y)) +
ggtitle("Curva ajustada aos dados") +
geom_point(size=3) +
geom_line(aes(y = prednls), size = 1, colour = "blue") +
theme_ipsum()
scatter.fitted
scatter.dados <- ggplot(dados.df, aes(x=x, y=y)) +
ggtitle("Scatterplot dos dados") +
geom_point(size=3) +
theme_ipsum()
scatter.dados
library(nlsresiduals)
library(nlstools)
library("tidyverse")
library(hrbrthemes)
library(ggplot2)
library(nlstools)
dados <- c(
84.30, 0.28,
97.30, 0.74,
10.73, 4.52,
80.65, 0.60,
34.49, 1.17,
77.40, 0.31,
52.94, 0.70,
22.92, 3.53,
76.30, 0.40,
99.65, 0.08,
92.08, 0.48,
1.49 , 1.73,
16.88, 3.77,
72.23, 0.06,
28.23, 3.03,
55.22, 0.67,
12.15, 4.01,
49.12, 0.63,
64.32, 0.21,
40.68, 1.72,
68.76, 0.31,
44.34, 1.01,
6.89 , 3.60,
18.78, 3.95,
68.15, 0.20
)
even_idx <- seq(1,length(dados), by=2)
odds_idx <- seq(1, length(dados))[-even_idx]
dados.df <- tibble(
x = dados[even_idx],
y = dados[odds_idx]
)
dados.df
scatter.dados <- ggplot(dados.df, aes(x=x, y=y)) +
ggtitle("Scatterplot dos dados") +
geom_point(size=3) +
theme_ipsum()
scatter.dados
ricker.model <- function(x, beta1, beta2){
return(beta1 * x * exp(-beta2*x))
}
#ajustando um modelo
ricker.fit <- nls(y ~ ricker.model(x, beta1, beta2), data = dados.df, start = list(beta1 = 0.1, beta2 = 0.1), control = nls.control(minFactor = 1/4096), algorithm = "default")
summary(ricker.fit)
summary <- summary(ricker.fit)
dados.df$prednls <- predict(ricker.fit)
head(dados.df)
scatter.fitted <- ggplot(dados.df, aes(x=x, y=y)) +
ggtitle("Curva ajustada aos dados") +
geom_point(size=3) +
geom_line(aes(y = prednls), size = 1, colour = "blue") +
theme_ipsum()
scatter.fitted
ricker.residuals <- nlsResiduals(ricker.fit)
plot(ricker.residuals)
summary
knitr::opts_chunk$set(echo = TRUE)
## Estimativa do coef. de correla¸c~ao de concord^ancia
rc <- function(X, Y, indices = 1:length(X)) {
n <- length(X)
cn <- (n - 1) / n
Xs <- X[indices]
Ys <- Y[indices]
Sx2 <- var(Xs) * cn
Sy2 <- var(Ys) * cn
Sxy <- cov(Xs, Ys) * cn
return(2 * Sxy / ((mean(Xs) - mean(Ys))^2 + Sx2 + Sy2))
}
dados <- tibble(
x = c(100, 58, 95, 55, 79, 95, 60, 88, 68, 94, 60, 64, 88, 57, 66, 67,
76, 95, 85, 105, 80, 85, 82, 102, 100, 75, 40, 70, 63, 103, 95,
80, 72, 68, 48, 70, 90, 60, 80, 96, 54, 80, 88, 70, 90, 79, 100,
85, 108, 53, 58, 49
),
y = c(97, 77, 74, 59, 79, 85, 78, 78, 68, 96, 74, 64, 76, 60, 78, 71,
67, 103, 95, 78, 70, 80, 78, 102, 102, 77, 45, 60, 50, 94, 91,
66, 63, 65, 58, 75, 105, 65, 80, 90, 58, 75, 83, 78, 85, 65, 90,
76, 100, 65, 40, 53
)
)
head(dados)
rc(dados$x, dados$y)
set.seed(7714)
B <- 5000 # Numero de amostras
rcs <- c() # Estimativas bootstrap
rcs[b] <- rc(dados$x, dados$y, sample(n, n, replace = TRUE))
for (b in 1:B) {
rcs[b] <- rc(dados$x, dados$y, sample(n, n, replace = TRUE))
}
set.seed(7714)
B <- 5000 # Numero de amostras
rcs <- c() # Estimativas bootstrap
for (b in 1:B) {
rcs[b] <- rc(dados$x, dados$y, sample(dados, length(dados$x), replace = TRUE))
}
sample(dados)
sample(dados)
sample(dados)
sample(dados, size = length(dados$x))
length(dados$x)
sample(dados, size = length(dados$x), replace = TRUE)
length(dados)
nrows(dados)
nrow(dados)
rcs[b] <- rc(dados$x, dados$y, sample(1:nrow(dados), nrow(dados), replace = TRUE))
set.seed(7714)
B <- 5000 # Numero de amostras
rcs <- c() # Estimativas bootstrap
for (b in 1:B) {
rcs[b] <- rc(dados$x, dados$y, sample(1:nrow(dados), nrow(dados), replace = TRUE))
}
hist(rcs, freq = FALSE, main = "", xlab = expression(r[c]^*),
hist(rcs, freq = FALSE, main = "", xlab = expression(r[c]^"*"),
ylab="Densidade", col="lightyellow")
lines(density(rcs), col = "blue", lty=2, lwd=2)
box()
mean(rcs)
sd(rcs)
knitr::opts_chunk$set(echo = TRUE)
x <- 1:4
y <- 6:9
x+y
B <- 1:5000
B_vector <- 1:5000
rcs_vector <- c()
rcs[B_vector] <- rc(dados$x, dados$y, sample(1:length(dados$x), size = length(dados$x)), replace=TRUE)
rcs[B_vector] <- rc(dados$x, dados$y, sample(1:length(dados$x), size = length(dados$x), replace=TRUE))
rcs[rcs_vector] <- rc(dados$x, dados$y, sample(1:length(dados$x), size = length(dados$x), replace=TRUE))
B_vector <- 1:5000
rcs_vector <- c()
rcs_vector[B_vector] <- rc(dados$x, dados$y, sample(1:length(dados$x), size = length(dados$x), replace=TRUE))
length(rcs_vector)
mean(rcs_vector)
dados.df
se(ricker.fit)
sd(ricker.fit)
sd(ricker.fit[[1]])
summary(ricker.fit)
summary$sigma
summary$coefficients
summary$coefficients[[1,2]]
summary$coefficients
summary$coefficients
#se beta 2
summary$coefficients[[2,2]]
#se beta1
summary$coefficients[[1,2]]
B = 5000
se.beta1.boot <- c()
se.beta2.boot <- c()
B = 1:5000
se.beta1.boot <- c()
se.beta2.boot <- c()
idxs.dados <- c()
#realizando a reamostragem dos dados
set.seed(1024)
idxs.dados[B] <- sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE)
length(idxs.dados)
idxs.dados
idxs.dados[[1]]
idxs.dados[B] <- list(sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE))
idxs.dados
idxs.dados[[1]]
idxs.dados[[2]]
B = 1:5000
se.beta1.boot <- c()
se.beta2.boot <- c()
idxs.dados <- c()
#realizando a reamostragem dos dados
set.seed(1024)
#realizando a reamostragem dos dados
set.seed(1024)
B = 1:5000
se.beta1.boot <- c()
se.beta2.boot <- c()
idxs.dados <- c()
#realizando a reamostragem dos dados
idxs.dados[B] <- list(sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE))
idxs.dados[[1]]
idxs.dados[[2]]
sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE)
sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE)
sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE)
sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE)
sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE)
sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE)
sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE)
sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE)
sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE)
B[[-1]]
B[-1]
tail(B)
tail(B, n=1)
#realizando a reamostragem dos dados
set.seed(42)
B = 1:5000
se.beta1.boot <- c()
se.beta2.boot <- c()
idxs.dados <- c()
#realizando a reamostragem dos dados
set.seed(42)
idxs.dados[B] <- replicate(tail(B, n=1),sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE), simplify = FALSE)
idxs.dados[[1]]
idxs.dados[[2]]
idxs.dados[[2\3]]
idxs.dados[[3]]
B = 1:5000
se.beta1.boot <- c()
se.beta2.boot <- c()
idxs.dados <- c()
#realizando a reamostragem dos dados
set.seed(42)
idxs.dados[B] <- replicate(tail(B, n=1),sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE), simplify = FALSE)
for (b in B){
#ajustando um modelo de minimos quadrados nao-linear
ricker.fit <- nls(y ~ ricker.model(x, beta1, beta2), data = dados.df[idxs.dados[[b]]], start = list(beta1 = 0.1, beta2 = 0.1), control = nls.control(minFactor = 1/4096), algorithm = "default")
#summary do modelo
summary.mod <- summary(ricker.fit)
#erro padrao beta1
se.beta1.boot <- summary$coefficients[[1,2]]
#erro padrao beta2
se.beta2.boot <- summary$coefficients[[2,2]]
}
B = 1:5000
se.beta1.boot <- c()
se.beta2.boot <- c()
idxs.dados <- c()
#realizando a reamostragem dos dados
set.seed(42)
idxs.dados[B] <- replicate(tail(B, n=1),sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE), simplify = FALSE)
for (b in B){
#ajustando um modelo de minimos quadrados nao-linear
ricker.fit <- nls(y ~ ricker.model(x, beta1, beta2), data = dados.df[idxs.dados[[b]]], start = list(beta1 = 0.1, beta2 = 0.1), control = nls.control(minFactor = 1/4096), algorithm = "default")
#summary do modelo
summary.mod <- summary(ricker.fit)
#erro padrao beta1
se.beta1.boot <- summary.mod$coefficients[[1,2]]
#erro padrao beta2
se.beta2.boot <- summary.mod$coefficients[[2,2]]
}
#ajustando um modelo de minimos quadrados nao-linear
ricker.fit <- nls(y ~ ricker.model(x, beta1, beta2), data = dados.df[idxs.dados[[b]]], start = list(beta1 = 0.1, beta2 = 0.1), control = nls.control(minFactor = 1/4096), algorithm = "default")
dados.df[[idxs.dados[[1]]]]
idxs.dados
length(idxs.dados[[1]])
dados.df
dados.df[1,2,3]
dados.df[[1,2,3]]
dados.df[[1]]
dados.df[[2]]
idxs.dados[[1]]
typeof(idxs.dados[[1]])
a <- c(1,2,3,4,5)
typeof(a)
as.list(idxs.dados[[1]])
as.double(idxs.dados[[1]])
B = 1:5000
se.beta1.boot <- c()
se.beta2.boot <- c()
idxs.dados <- c()
#realizando a reamostragem dos dados
set.seed(42)
idxs.dados[B] <- replicate(tail(B, n=1),sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE), simplify = FALSE)
for (b in B){
#ajustando um modelo de minimos quadrados nao-linear
ricker.fit <- nls(y ~ ricker.model(x, beta1, beta2), data = dados.df[as.double(idxs.dados[[b]]),], start = list(beta1 = 0.1, beta2 = 0.1), control = nls.control(minFactor = 1/4096), algorithm = "default")
#summary do modelo
summary.mod <- summary(ricker.fit)
#erro padrao beta1
se.beta1.boot <- summary.mod$coefficients[[1,2]]
#erro padrao beta2
se.beta2.boot <- summary.mod$coefficients[[2,2]]
}
#media do erro padrao do estimador beta1
cbind(mean(se.beta1.boot), mean(se.beta2.boot))
B = 1:5000
se.beta1.boot <- c()
se.beta2.boot <- c()
idxs.dados <- c()
#realizando a reamostragem dos dados
set.seed(42)
idxs.dados[B] <- replicate(tail(B, n=1),sample(1:length(dados.df$x), size = length(dados.df$x), replace = TRUE), simplify = FALSE)
for (b in B){
#ajustando um modelo de minimos quadrados nao-linear
ricker.fit <- nls(y ~ ricker.model(x, beta1, beta2), data = dados.df[as.double(idxs.dados[[b]]),], start = list(beta1 = 0.1, beta2 = 0.1), control = nls.control(minFactor = 1/4096), algorithm = "default")
#summary do modelo
summary.mod <- summary(ricker.fit)
#erro padrao beta1
se.beta1.boot <- summary.mod$coefficients[[1,2]]
#erro padrao beta2
se.beta2.boot <- summary.mod$coefficients[[2,2]]
}
#media do erro padrao do estimador beta1
cbind(mean(se.beta1.boot), mean(se.beta2.boot))
#comparando os erros
erros.betas <- tibble(
beta1 <- c(summary$coefficients[[1,2]], mean(se.beta1.boot))
beta2 <- c(summary$coefficients[[2,2]], mean(se.beta2.boot))
#comparando os erros
erros.betas <- tibble(
beta1 = c(summary$coefficients[[1,2]], mean(se.beta1.boot))
beta2 = c(summary$coefficients[[2,2]], mean(se.beta2.boot))
#comparando os erros
erros.betas <- tibble(
beta1 = c(summary$coefficients[[1,2]], mean(se.beta1.boot)),
beta2 = c(summary$coefficients[[2,2]], mean(se.beta2.boot))
)
erros.betas
#comparando os erros
erros.betas <- tibble(
beta1 = c(summary$coefficients[[1,2]], mean(se.beta1.boot)),
beta2 = c(summary$coefficients[[2,2]], mean(se.beta2.boot))
)
erros.betas <- as.data.frame(erros.betas)
row.names(erros.betas) <- c("Erro padrao", "Erro padrao bootstrap")
erros.betas
dados.df
library(tidymodels)
install.packages(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
library(tidymodels)
library(boot)
help(boot)
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
