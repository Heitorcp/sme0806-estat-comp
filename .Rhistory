#vetor inicial
v <- c(1,2,3,4,5,6,7)
#definindo as sequencias de condicoes
sequences <- list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
)
#amostrando os valores 5000 vezes
monte_carlo_samples <- lapply(1:R, function(x) sample(v, size = length(v), replace = FALSE))
#filtrando as condicoes
monte_carlo_samples_filtered <- monte_carlo_samples[sapply(monte_carlo_samples, function(x) any(sapply(sequences, function(seq) identical(x[1:length(seq)], seq))))]
length(monte_carlo_samples_filtered)
set.seed(42)
#numero de simulações Monte-Carlo
R <- 10000
#vetor inicial
v <- c(1,2,3,4,5,6,7)
#definindo as sequencias de condicoes
sequences <- list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
)
#amostrando os valores 5000 vezes
monte_carlo_samples <- lapply(1:R, function(x) sample(v, size = length(v), replace = FALSE))
#filtrando as condicoes
monte_carlo_samples_filtered <- monte_carlo_samples[sapply(monte_carlo_samples, function(x) any(sapply(sequences, function(seq) identical(x[1:length(seq)], seq))))]
length(monte_carlo_samples_filtered)
prop.sucesso <- length(monte_carlo_samples_filtered)/R
erro.MC <- prop.sucesso*(1-prop.sucesso)/R-1
#estimativa pontual do sistema funcionar
prop.sucesso
qnorm(0.975)
#IC 95% com aproximacao normal da estimativa
IC.li <- prop.sucesso - qnorm(0.975)*erro.MC
IC.ls <- prop.sucesso + qnorm(0.975)*erro.MC
#IC 95% com aproximacao normal da estimativa
IC.li <- round(prop.sucesso - qnorm(0.975)*erro.MC,3)
IC.ls <- round(prop.sucesso + qnorm(0.975)*erro.MC,3)
IC.MC <- cbind(IC.li, IC.ls)
IC.MC
#estimativa pontual do sistema funcionar
prop.sucesso
erro.MC
prop.sucesso <- length(monte_carlo_samples_filtered)/R
erro.MC <- prop.sucesso*(1-prop.sucesso)/(R-1)
erro.MC
#estimativa pontual do sistema funcionar
prop.sucesso
#IC 95% com aproximacao normal da estimativa
IC.li <- round(prop.sucesso - qnorm(0.975)*erro.MC,3)
IC.ls <- round(prop.sucesso + qnorm(0.975)*erro.MC,3)
IC.MC <- cbind(IC.li, IC.ls)
IC.MC
#IC 95% com aproximacao normal da estimativa
IC.li <- round(prop.sucesso - qnorm(0.975)*erro.MC)
IC.ls <- round(prop.sucesso + qnorm(0.975)*erro.MC)
IC.MC <- cbind(IC.li, IC.ls)
IC.MC
#IC 95% com aproximacao normal da estimativa
IC.li <- prop.sucesso - qnorm(0.975)*erro.MC)
IC.ls <- prop.sucesso + qnorm(0.975)*erro.MC)
#IC 95% com aproximacao normal da estimativa
IC.li <- prop.sucesso - qnorm(0.975)*erro.MC
IC.ls <- prop.sucesso + qnorm(0.975)*erro.MC
IC.MC <- cbind(IC.li, IC.ls)
IC.MC
monte_carlo_samples_filtered[[1]]
#definido as probabilidades de funcionamento para cada caminho possivel
p1 = 0.867
p2 = 0.952
p3 = 0.986
p4 = 0.878
p5 = 0.871
p6 = 0.995
p7 = 0.903
p.C1 <- p1*p2*p3
p.C2 <- p1*p4*p5*p3
p.C3 <- p1*p4*p7
p.C5 <- p6*p7
#definindo as sequencias de condicoes
sequences <- list(
c(1,2,3),
prob = p.C1,
c(1,4,5,3),
prob = p.C2,
c(1,4,7),
prob = p.C3,
c(6,5,3),
prob = p.C4,
c(6,7),
prob = p.C5
)
p.C1 <- p1*p2*p3
p.C2 <- p1*p4*p5*p3
p.C3 <- p1*p4*p7
p.C4 <- p6*p5*p3
p.C5 <- p6*p7
#definindo as sequencias de condicoes
sequences <- list(
c(1,2,3),
prob = p.C1,
c(1,4,5,3),
prob = p.C2,
c(1,4,7),
prob = p.C3,
c(6,5,3),
prob = p.C4,
c(6,7),
prob = p.C5
)
sequences
sequences$prob
sequences[[2]]$prob
sequences[1]
sequences[2]
sequences[3]
sequences[4]
#criando um dataframe com os resultados filtrados
result_df <- data.frame(
sample = unlist(sapply(filtered_samples, paste, collapse = ", ")),
probability = unlist(sapply(monte_carlo_samples_filtered, function(x) sequences$prob[sapply(sequences$seq, function(seq) identical(x[1:length(seq)], seq))]))
)
#criando um dataframe com os resultados filtrados
result_df <- data.frame(
sample = unlist(sapply(monte_carlo_samples_filtered, paste, collapse = ", ")),
probability = unlist(sapply(monte_carlo_samples_filtered, function(x) sequences$prob[sapply(sequences$seq, function(seq) identical(x[1:length(seq)], seq))]))
)
sequences$prob
#definindo as sequencias de condicoes
sequences <- data.frame(
seq = list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7),
),
prob = c(p.C1, p.C2, p.C3, p.C4, p.C5)
)
#definindo as sequencias de condicoes
sequences <- data.frame(
seq = list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
),
prob = c(p.C1, p.C2, p.C3, p.C4, p.C5)
)
#vetor inicial
v <- c(1,2,3,4,5,6,7)
#definindo as sequencias de condicoes
sequences <- data.frame(
seq = list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
),
prob = c(p.C1, p.C2, p.C3, p.C4, p.C5)
)
#definindo as sequencias de condicoes
sequences <- data.frame(
seq = list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
),
prob = c(p.C1, p.C2, p.C3, p.C4, p.C5)
)
p.C1
list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
)
#definindo as sequencias de condicoes
sequences <- data.frame(
#definindo as sequencias de condicoes
sequences <- data.frame(
sequences
#definindo as sequencias de condicoes
sequences <- data.frame(
#definindo as sequencias de condicoes
sequences <- data.frame(
seq = list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
))
#definindo as sequencias de condicoes
sequences <- tibble(
seq = list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
))
sequences
sequences[[1]]
sequences[[2]]
sequences[,1]
sequences[1,]
#definindo as sequencias de condicoes
sequences <- tibble(
seq = list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
),
prob = c(p.C1, p.C2, p.C3, p.C4, pc5)
)
#definindo as sequencias de condicoes
sequences <- tibble(
seq = list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
),
prob = c(p.C1, p.C2, p.C3, p.C4, p.C5)
)
sequences
#definindo as sequencias de condicoes
sequences <- tibble(
seq = unnest(list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
)),
prob = c(p.C1, p.C2, p.C3, p.C4, p.C5)
)
set.seed(42)
#definido as probabilidades de funcionamento para cada caminho possivel
p1 = 0.867
p2 = 0.952
p3 = 0.986
p4 = 0.878
p5 = 0.871
p6 = 0.995
p7 = 0.903
p.C1 <- p1*p2*p3
p.C2 <- p1*p4*p5*p3
p.C3 <- p1*p4*p7
p.C4 <- p6*p5*p3
p.C5 <- p6*p7
#numero de simulações Monte-Carlo
R <- 10000
#vetor inicial
v <- c(1,2,3,4,5,6,7)
#definindo as sequencias de condicoes
sequences <- tibble(
seq = list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
),
prob = c(p.C1, p.C2, p.C3, p.C4, p.C5)
)
#   prob = c(p.C1, p.C2, p.C3, p.C4, p.C5)
# )
#amostrando os valores 5000 vezes
monte_carlo_samples <- lapply(1:R, function(x) sample(v, size = length(v), replace = FALSE))
#filtrando as condicoes
monte_carlo_samples_filtered <- monte_carlo_samples[sapply(monte_carlo_samples, function(x) any(sapply(sequences, function(seq) identical(x[1:length(seq)], seq))))]
length(monte_carlo_samples_filtered)
#criando um dataframe com os resultados filtrados
result_df <- data.frame(
sample = unlist(sapply(monte_carlo_samples_filtered, paste, collapse = ", ")),
probability = unlist(sapply(monte_carlo_samples_filtered, function(x) sequences$prob[sapply(sequences$seq, function(seq) identical(x[1:length(seq)], seq))]))
)
result_df
sequences
set.seed(42)
#numero de simulações Monte-Carlo
R <- 10000
#vetor inicial
v <- c(1,2,3,4,5,6,7)
#definindo as sequencias de condicoes
sequences <- list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
)
#amostrando os valores 5000 vezes
monte_carlo_samples <- lapply(1:R, function(x) sample(v, size = length(v), replace = FALSE))
#filtrando as condicoes
monte_carlo_samples_filtered <- monte_carlo_samples[sapply(monte_carlo_samples, function(x) any(sapply(sequences, function(seq) identical(x[1:length(seq)], seq))))]
length(monte_carlo_samples_filtered)
monte_carlo_samples
#probabilidades de cada elemento
p1 <- 0.867
p2 <- 0.952
p3 <- 0.986
p4 <- 0.878
p5 <- 0.871
p6 <- 0.995
p7 <- 0.903
#caminhos possiveos
c1 <- c(1,2,3)
c2 <- c(1,4,5,3)
c3 <- c(1,4,7)
c4 <- c(6,5,3)
c5 <- c(6,7)
#probabilidade de cada caminho
p.c1 <- p1*p2*p3
p.c2 <- p1*p4*p5*p3
p.c3 <- p1*p4*p7
p.c4 <- p6*p5*p3
p.c5 <- p6*p7
#vetor de caminhos
paths <- c(c1, c2, c3, c4, c5)
paths
paths[1]
paths[[1]]
#vetor de caminhos
paths <- c(list(c1, c2, c3, c4, c5))
paths
paths[[1]]
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, n = 10, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, n = 1, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
#amostrando os caminhos
R <- 1:5000
amostras <- c()
amostras[R] <- sample(paths, replace = TRUE, prob = c(p.c1, p.c2, p.c3, p.c4, p.c5))
amostras
typeof(amostras)
library(tibble)
enframe(amostras)
amostras.df <- enframe(amostras)
amostras.df <- enframe(amostras, name = "amostra")
amostras.df
as.data.frame(amostras.df)
amostras.df <- enframe(amostras, name = "amostra")
amostras.df$value
amostras.df$value[[1]]
amostras.df$value[[1]] == c(6,5,3)
amostras.df <- enframe(amostras, name = "amostra")
#amostrando os valores 5000 vezes
monte_carlo_samples <- lapply(1:R, function(x) sample(v, size = length(v), replace = FALSE))
monte_carlo_samples
set.seed(42)
#numero de simulações Monte-Carlo
R <- 10000
#vetor inicial
v <- c(1,2,3,4,5,6,7)
#definindo as sequencias de condicoes
sequences <- list(
c(1,2,3),
c(1,4,5,3),
c(1,4,7),
c(6,5,3),
c(6,7)
)
#amostrando os valores 5000 vezes
monte_carlo_samples <- lapply(1:R, function(x) sample(v, size = length(v), replace = FALSE))
#filtrando as condicoes
monte_carlo_samples_filtered <- monte_carlo_samples[sapply(monte_carlo_samples, function(x) any(sapply(sequences, function(seq) identical(x[1:length(seq)], seq))))]
monte_carlo_samples
monte_carlo_samples_df <- as.data.frame(monte_carlo_samples_df)
monte_carlo_samples_df <- as.data.frame(monte_carlo_samples)
monte_carlo_samples_df
monte_carlo_samples_df <- enframe(monte_carlo_samples)
monte_carlo_samples_df
monte_carlo_samples_df <- as.data.frame(do.call(monte_carlo_samples))
monte_carlo_samples_df <- as.data.frame(do.call(cbind, monte_carlo_samples))
monte_carlo_samples_df
monte_carlo_samples_df[[1]]
monte_carlo_samples_df[[2]]
monte_carlo_samples_df[[999]]
library("tidyverse")
library(hrbrthemes)
library(ggplot2)
library(nlstools)
library(rsample)
library(tibble)
#probabilidades de cada elemento
p1 <- 0.867
p2 <- 0.952
p3 <- 0.986
p4 <- 0.878
p5 <- 0.871
p6 <- 0.995
p7 <- 0.903
#simulando o sistema R vezes
simulacao_MC <- function(R){
x <- 0
for(i in 1:R){
estado <- c(rbernoulli(1,p1),rbernoulli(1,p2), rbernoulli(1,p3),rbernoulli(1,p4), rbernoulli(1,p5), rbernoulli(1,p6), rbernoulli(1,p7))
if(estado[1] && estado[2] && estado[3] || estado[1] && estado[4] && estado[5] && estado[3] || estado[1] && estado[4] && estado[7] || estado[3] && estado[5] && estado[3] || estado[6] && estado[7]){
x <- x + 1
}
}
prop <- round(x/R,2)
return(prop)
}
simulacao_MC(100)
install.packages("mc2d")
library(mc2d)
#probabilidades de cada elemento
p1 <- 0.867
p2 <- 0.952
p3 <- 0.986
p4 <- 0.878
p5 <- 0.871
p6 <- 0.995
p7 <- 0.903
#simulando o sistema R vezes
simulacao_MC <- function(R){
x <- 0
for(i in 1:R){
estado <- c(rbern(1,p1),rbern(1,p2), rbern(1,p3),rbern(1,p4), rbern(1,p5), rbern(1,p6), rbern(1,p7))
if(estado[1] && estado[2] && estado[3] || estado[1] && estado[4] && estado[5] && estado[3] || estado[1] && estado[4] && estado[7] || estado[3] && estado[5] && estado[3] || estado[6] && estado[7]){
x <- x + 1
}
}
prop <- round(x/R,2)
return(prop)
}
simulacao_MC(100)
simulacao_MC(1000)
simulacao_MC(5000)
simulacao_MC(5000)
## Questão 2
simulacao_MC(5000)
simulacao_MC(5000)
simulacao_MC(8000)
rbern(1,0.985)
rbern(1,0.5)
rbern(1,0.5)
rbern(1,0.5)
teste <- c(rbern(1,0.5), rbern(1,0.5))
teste
paste(TRUE)
teste <- c(rbern(1,0.5), rbern(1,0.5))
teste
if(teste[1] && teste[2]){
paste(TRUE)
}
if(teste[1] && teste[2]){
paste(TRUE)
}
if(teste[1] && teste[2]){
paste(TRUE)
}
teste
teste <- c(rbern(1,0.5), rbern(1,0.5))
teste
teste <- c(rbern(1,0.5), rbern(1,0.5))
teste
teste <- c(rbern(1,0.5), rbern(1,0.5))
teste
if(teste[1] && teste[2]){
paste(TRUE)
}
teste <- c(rbern(1,0.99), rbern(1,0.99))
teste
if(teste[1] && teste[2]){
paste(TRUE)
}
ls
clear
